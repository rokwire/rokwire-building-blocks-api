openapi: 3.0.0
info:
  title: Simple Notification API
  description: This is a simple API
  contact:
    email: xialiao@illinois.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/uiuc-scci/notifications/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: notifications
  description: all notifications
paths:
  /notifications:
    get:
      tags:
      - notifications
      summary: searches notifications
      description: By passing in the appropriate options, you can search for notifications matching your criteria in the system
      operationId: searchNotifications
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up notification
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        400:
          description: bad input parameter
    post:
      tags:
      - notifications
      summary: create a notification
      description: create a notification record to the system
      requestBody:
        description: a notification to be added into system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        201:
          description: notification created
        400:
          description: invalid input, object invalid
  /notifications/createWithList:
    post:
      tags:
      - notifications
      summary: Creates list of notifications with given input array
      operationId: createNotificationsWithListInput
      requestBody:
        $ref: '#/components/requestBodies/NotificationArray'
      responses:
        default:
          description: successful operation
  /notifications/{notificationId}:
    delete:
      tags:
      - notifications
      summary: Deletes a notification
      operationId: deleteNotification
      parameters:
      - name: notificationId
        in: path
        description: notification id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Notification is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Notification not found
  /notifications/{userName}:
    get:
      tags:
      - notifications
      summary: Find notifications by userName
      description: Returns all notifications of the user
      operationId: getNotificationsByUserName
      parameters:
      - name: userName
        in: path
        description: user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        401:
          description: Unauthorized
components:
  schemas:
    Notification:
      required:
      - id
      - notifyDate
      - userName
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/NotificationCategory'
        content:
          type: string
        userName:
          type: string
        deliveryOption:
          type: string
          description: notification method
          enum:
          - email
          - text
          - mobile notification
        notifyDate:
          type: string
          format: date-time
        status:
          type: string
          description: whether a notification has been read
          enum:
          - new
          - read
    NotificationCategory:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: event, class registration etc.
        description:
          type: string
  requestBodies:
    NotificationArray:
      description: List of Notification object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Notification'
      required: true
