openapi: 3.0.0
info:
  title: Rokwire Platform API
  description: REST API design and documentation for Rokwire platform
  version: 0.0.1
servers:
- url: https://virtserver.swaggerhub.com/uiuc-rokwire/rokwire/0.0.1
  description: SwaggerHub API Auto Mocking
tags:
- name: Profile
  description: API endpoints for managing user profile.
- name: Notifications
  description: API endpoints for managing user notifications.
paths:
  /profiles:
    post:
      tags:
      - Profile
      summary: Create profile
      description: This can only be done by the authenticated user.
      operationId: createProfile
      requestBody:
        description: Created profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        201:
          description: Profile created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /profiles/{userName}:
    get:
      tags:
      - Profile
      summary: Find profile by userName
      description: Returns a single profile
      operationId: getProfileByUserName
      parameters:
      - name: userName
        in: path
        description: user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
  /profiles/{profileId}:
    get:
      tags:
      - Profile
      summary: Find profile by ID
      description: Returns a single profile
      operationId: getProfileById
      parameters:
      - name: profileId
        in: path
        description: ID of profile to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    put:
      tags:
      - Profile
      summary: Updates a profile with form data
      operationId: updateProfileWithForm
      parameters:
      - name: profileId
        in: path
        description: ID of profile that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: update profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - Profile
      summary: Deletes a profile
      operationId: deleteProfile
      parameters:
      - name: profileId
        in: path
        description: Profile id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Profile is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Profile not found
        500:
          description: Internal error
  /profiles/{profileId}/uploadImage:
    post:
      tags:
      - Profile
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: profileId
        in: path
        description: ID of profile to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request
        500:
          description: Some has gone wrong, try again later
  /notifications:
    get:
      tags:
      - Notifications
      summary: searches notifications
      description: By passing in the appropriate options, you can search for notifications matching your criteria in the system
      operationId: searchNotifications
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up notification
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        400:
          description: bad input parameter
    post:
      tags:
      - Notifications
      summary: create a notification
      description: create a notification record to the system
      requestBody:
        description: a notification to be added into system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        201:
          description: notification created
        400:
          description: invalid input, object invalid
  /notifications/createWithList:
    post:
      tags:
      - Notifications
      summary: Creates list of notifications with given input array
      operationId: createNotificationsWithListInput
      requestBody:
        $ref: '#/components/requestBodies/NotificationArray'
      responses:
        default:
          description: successful operation
  /notifications/{notificationId}:
    delete:
      tags:
      - Notifications
      summary: Deletes a notification
      operationId: deleteNotification
      parameters:
      - name: notificationId
        in: path
        description: notification id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Notification is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Notification not found
  /notifications/{userName}:
    get:
      tags:
      - Notifications
      summary: Find notifications by userName
      description: Returns all notifications of the user
      operationId: getNotificationsByUserName
      parameters:
      - name: userName
        in: path
        description: user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        401:
          description: Unauthorized
components:
  schemas:
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
    Notification:
      required:
      - id
      - notifyDate
      - userName
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/NotificationCategory'
        content:
          type: string
        userName:
          type: string
        deliveryOption:
          type: string
          description: notification method
          enum:
          - email
          - text
          - mobile notification
        notifyDate:
          type: string
          format: date-time
        status:
          type: string
          description: whether a notification has been read
          enum:
          - new
          - read
    NotificationCategory:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: event, class registration etc.
        description:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          example: everything is ok
  requestBodies:
    NotificationArray:
      description: List of Notification object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Notification'
      required: true
