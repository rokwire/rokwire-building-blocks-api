openapi: 3.0.0
info:
  title: Rokwire Platform API
  description: REST API design and documentation for Rokwire platform
  version: 0.0.1
servers:
- url: https://virtserver.swaggerhub.com/uiuc-rokwire/rokwire/0.0.1
  description: SwaggerHub API Auto Mocking
tags:
- name: Profile
  description: API endpoints for managing user profile.
- name: PII
  description: API endpoints for managing user pii profile.
- name: Notifications
  description: API endpoints for managing user notifications.
- name: Events
  description: API endpoints for managing events.
paths:
  /profiles:
    post:
      tags:
      - Profile
      summary: Create profile
      description: Create non-pii profile with profile id.
      operationId: createProfile
      requestBody:
        description: Created profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Non-pii'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /profiles/{profileId}:
    get:
      tags:
      - Profile
      summary: Find profile by ID
      description: Returns a single profile
      operationId: getProfileById
      parameters:
      - name: profileId
        in: path
        description: ID of profile to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    put:
      tags:
      - Profile
      summary: Updates a profile with form data
      operationId: updateProfileWithForm
      parameters:
      - name: profileId
        in: path
        description: ID of profile that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: update profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Non-pii'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - Profile
      summary: Deletes a profile
      operationId: deleteProfile
      parameters:
      - name: profileId
        in: path
        description: Profile id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Profile is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Profile not found
        500:
          description: Internal error
  /profiles/{profileId}/uploadImage:
    post:
      tags:
      - Profile
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: profileId
        in: path
        description: ID of profile to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: 'Form inputs representing the image'
        content:
          FormDataMultiPart:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Bad request
        500:
          description: Some has gone wrong, try again later
  /profiles/pii:
    post:
      tags:
      - PII
      summary: Create pii entry
      description: This creates a new pii entry.
      operationId: createPii
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Bad request
        500:
          description: Internal error
  /profiles/pii/{piiId}:
    get:
      tags:
      - PII
      summary: Find pii by ID
      description: Returns a single pii
      operationId: getPiiById
      parameters:
      - name: piiId
        in: path
        description: ID of pii to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    put:
      tags:
      - PII
      summary: Updates a pii with form data
      operationId: updatePiiWithForm
      parameters:
      - name: piiId
        in: path
        description: ID of pii that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pii'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - PII
      summary: Deletes a pii
      operationId: deletePii
      parameters:
      - name: piiId
        in: path
        description: Pii id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: Profile is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Profile not found
        500:
          description: Internal error
  /notifications:
    get:
      tags:
      - Notifications
      summary: searches notifications
      description: By passing in the appropriate options, you can search for notifications matching your criteria in the system
      operationId: searchNotifications
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up notification
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        400:
          description: bad input parameter
    post:
      tags:
      - Notifications
      summary: create a notification
      description: create a notification record to the system
      requestBody:
        description: a notification to be added into system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        201:
          description: notification created
        400:
          description: invalid input, object invalid
  /notifications/createWithList:
    post:
      tags:
      - Notifications
      summary: Creates list of notifications with given input array
      operationId: createNotificationsWithListInput
      requestBody:
        $ref: '#/components/requestBodies/NotificationArray'
      responses:
        default:
          description: successful operation
  /notifications/{notificationId}:
    delete:
      tags:
      - Notifications
      summary: Deletes a notification
      operationId: deleteNotification
      parameters:
      - name: notificationId
        in: path
        description: notification id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Notification is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Notification not found
  /notifications/{userName}:
    get:
      tags:
      - Notifications
      summary: Find notifications by userName
      description: Returns all notifications of the user
      operationId: getNotificationsByUserName
      parameters:
      - name: userName
        in: path
        description: user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        401:
          description: Unauthorized
  /events:
    get:
      tags:
      - Events
      summary: searches events
      description: By passing in the appropriate options, you can search for events matching your criteria in the system
      operationId: searchEvents
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up events
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    post:
      tags:
        - Events
      summary: create an event
      description: create an event record into the system
      operationId: createEvent
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        201:
          description: Events created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /events/{eventId}:
    delete:
      tags:
      - Events
      summary: Deletes an event by the given event id
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        description: event id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Event is deleted
        400:
          description: Invalid ID supplied
        404:
          description: Event not found
components:
  schemas:
    Non-pii:
      type: object
      properties:
        uuid:
          type: string
        over13:
          type: boolean
        athleticsInterests:
          type: array
          xml:
            name: athleticsInterests
            wrapped: true
          items:
            type: string
        generalInterests:
          type: array
          xml:
            name: generalInterests
            wrapped: true
          items:
            type: string
        imageUri:
          type: string
        creationDate:
          type: string
        lastModifiedDate:
          type: string
    Pii:
      type: object
      properties:
        uuid:
          type: string
        pid:
          type: string
        userName:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phone:
          type: string
        imageUrl:
          type: string
        creationDate:
          type: string
        lastModifiedDate:
          type: string
    Event:
      required:
        - title
        - startDate
        - endDate
        - sponsor
        - eventType
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: the event id
        eventType:
          type: string
          enum:
            - Ceremony/Service
            - Community Service
            - Conference/Workshop
            - Exhibition
            - Festival/Celebration
            - Film Screening
            - Health/Fitness
            - Informational
            - Lecture
            - Meeting
            - Performance
            - Professional Development
            - Reception/Open House
            - Seminar/Symposium
            - Social/Informal Event
            - Sporting Event
            - Other
        sponsor:
          type: string
          description: For example, Center for Advanced Study
        title:
          type: string
        titleURL:
          type: string
          description: Title URL representing the event title. For example, https://cas.illinois.edu/node/190
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        targetAudience:
          type: array
          items:
            type: "string"
            enum:
            - students
            - faculty
            - staff
            - alumni
            - parents
            - public
        icalUrl:
          type: string
        outlookUrl:
          type: string
        speaker:
          type: string
        registrationURL:
          type: string
        cost:
          type: string
          description: For example, Free and open to the public.
        contacts:
          type: array
          xml:
            name: "contact"
            wrapped: true
          items:
            $ref: "#/components/schemas/Contact"
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            type: string
        location:
          $ref: "#/components/schemas/Location"

    Location:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude component of location.
        longitude:
          type: number
          description: Longitude component of location.
        description:
          type: string
          description: building name and room number, e.g., Krannert Center for the Performing Arts, 500 S Goodwin Ave, Urbana.
        floor:
          type: integer

    Contact:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        organization:
          type: string
      xml:
        name: "Contact"

    Notification:
      required:
      - id
      - notifyDate
      - userName
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/NotificationCategory'
        content:
          type: string
        userName:
          type: string
        deliveryOption:
          type: string
          description: notification method
          enum:
          - email
          - text
          - mobile notification
        notifyDate:
          type: string
          format: date-time
        status:
          type: string
          description: whether a notification has been read
          enum:
          - new
          - read
    NotificationCategory:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: event, class registration etc.
        description:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          example: everything is ok
    FileDescriptor:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        filename:
          type: string
        mimeType:
          type: string
        size:
          type: integer
          format: int64
        dataURL:
          type: string
        md5sum:
          type: string
  requestBodies:
    NotificationArray:
      description: List of Notification object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Notification'
      required: true