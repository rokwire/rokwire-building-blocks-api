openapi: 3.0.0
info:
  title: Rokwire Platform API
  description: Rokwire Platform API Documentation
  version: 1.0.4
servers:
- url: https://api.rokwire.illinois.edu
  description: Production server
- url: https://api-test.rokwire.illinois.edu
  description: Test server
- url: https://api-dev.rokwire.illinois.edu
  description: Development server
tags:
- name: Profile
  description: API endpoints for managing non-PII user profile.
- name: PII
  description: API endpoints for managing PII user profile.
- name: Events
  description: API endpoints for managing events.
- name: App Configuration
  description: API endpoints for managing mobile app configuration
- name: Logs
  description: API endpoints for managing logs
- name: Authentication
  description: API endpoints for managing user phone number verification.
paths:
  /profiles:
    post:
      tags:
      - Profile
      summary: Create profile
      description: |
        Create non-PII profile with profile id.
        
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Created profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Non-pii'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /profiles/{uuid}:
    get:
      tags:
      - Profile
      summary: Find profile by ID
      description: |
        Returns a single profile
        
        Auth: Requires a valid API Key and profile uuid for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: uuid
        in: path
        description: ID of profile to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    put:
      tags:
      - Profile
      summary: Updates a profile with form data
      description: |
        Auth: Requires a valid API Key and profile uuid for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: uuid
        in: path
        description: ID of profile that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Non-pii'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Non-pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Non-pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - Profile
      summary: Deletes a profile
      description: |
        Auth: Requires a valid API Key and profile uuid for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: uuid
        in: path
        description: Profile id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: Profile is deleted
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
  /profiles/pii:
    post:
      tags:
      - PII
      summary: Create PII entry
      description: |
        This creates a new PII entry.

        Auth: Requires a valid id_token for access. The PII entry is populated from the id_token contents.
      security:
        - UserAuth: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /profiles/pii/{pid}:
    get:
      tags:
      - PII
      summary: Get PII by PID
      description: |
        Returns a single PII entry.

        Auth: Requires a valid id_token and PID for access. The contents of the id_token (phone number, uin) must match the PII entry contents.
      security:
        - UserAuth: []
      parameters:
      - name: pid
        in: path
        description: ID of PII to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
    put:
      tags:
      - PII
      summary: Updates a PII with form data
      description: |
        Auth: Requires a valid id_token and PID For access. The contents of the id_token (phone number, uin) must match the old and new PII entry contents (i.e., phone number and uin can't be changed).
      security:
        - UserAuth: []
      parameters:
      - name: pid
        in: path
        description: ID of PII that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update profile object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pii'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pii'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pii'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - PII
      summary: Deletes a PII
      description: |
        Auth: Requires a valid id_token and PID For access. The contents of the id_token (phone number, uin) must match the contents of the PII entry to be deleted.
      security:
        - UserAuth: []
      parameters:
      - name: pid
        in: path
        description: Pii id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: Profile is deleted
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Profile not found
        500:
          description: Internal error
  /events:
    get:
      tags:
      - Events
      summary: searches events
      description: |
        By passing in the appropriate options, you can search for events matching your criteria in the system
        
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: title
        in: query
        description: The parameter for searching events based on keywords in the title.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: recurrenceId
        in: query
        description: The parameter to search events based on a specific recurrence ID.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: tags
        in: query
        description: Search events with the given tags, e.g., /events?tags=coffee&tags=music. This query will return all events whose tags contain coffee or music
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: targetAudience
        in: query
        description: The parameter for searching events based on given input target audience, e.g., /events?targetAudience=students&targetAudience=staff. This query will return all events whose target audience is either students or staff. This parameter is CURRENTLY IGNORED.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDate
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?startDate=2019-04-25T13:00:00. This query will return all events whose start date is equal or after the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endDate
        in: query
        description: The parameter for searching events based on a given end date, e.g., /events?endDate=2019-04-25T13:00:00. This query will return all events whose start date is equal or before the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: latitude
        in: query
        description: The latitude of the center point for geolocation radius search.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: longitude
        in: query
        description: The longitude of the center point for geolocation radius search.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: radius
        in: query
        description: The parameter to search events within a given radius of the provided location in meters, e.g., /events?latitude=40.1078955&longitude=-88.224036&radius=800. This query will return back all events whose geolocation is within 800 meter centered at given geolocation point.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      - name: id
        in: query
        description: The parameter for searching multiple events based on their IDs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superEventId
        in: query
        description: The parameter for searching sub events based on the ID of a super event.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

        401:
          description: Unauthorized
        404:
          description: Event not found
        500:
          description: Internal error
    post:
      tags:
        - Events
      summary: create an event
      description: |
        create an event record into the system

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        201:
          description: Events created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error

  /events/{event_id}:
    get:
      tags:
      - Events
      summary: Get one event by the given event id.
      description: |
        Get the event record matching the eventId.

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: event_id
        in: path
        description: ID of the event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        500:
          description: Internal error
    put:
      tags:
      - Events
      summary: Updates one event with form data
      description: |
        Update the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: ID of the event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update one event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - Events
      summary: Deletes an event by the given event id
      description: |
        Delete the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: event id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: Event is deleted
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Event not found
    patch:
      tags:
        - Events
      summary: Updates one event with form data
      description: |
        Update the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      parameters:
        - name: event_id
          in: path
          description: ID of the event that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: patch one event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
  /events/categories:
    get:
      tags:
      - Events
      summary: Get events categories
      description: |
        return back a list of categories and subcategories

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'

        401:
          description: Unauthorized
        404:
          description: Event not found
        500:
          description: Internal error
  /events/tags:
    get:
      tags:
      - Events
      summary: Get a list of Rokwire event tags
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Getting event tags successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal error

  /events/{event_id}/images:
    get:
      tags:
      - Events
      summary: Get IDs of all images associated with the requested event.
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Getting image IDs successful.
          content:
            multipart/form-data:
              schema:
                type: array
                items:
                  type: string
                  format: binary
        500:
          description: Internal error
    post:
      tags:
        - Events
      summary: Upload an image to the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Image file to upload and associate with the requested event
        content:
          image/*:
            schema:
              type: string
              format: binary
              minLength: 1
              maxLength: 5000000
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      responses:
        201:
          description: Images uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Image ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error

  /events/{event_id}/images/{image_id}:
    get:
      tags:
      - Events
      summary: Download an event image by providing the IDs of the event and the image.
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: Requested image ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful image download
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        500:
          description: Internal Error

    put:
      tags:
      - Events
      summary: Update an image associated with the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Image file to add to the event
        content:
          image/*:
            schema:
              type: string
              format: binary
              minLength: 1
              maxLength: 5000000
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: Requested image ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Event ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error

    delete:
      tags:
      - Events
      summary: Delete an image associated with the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: ID of the image that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        202:
          description: Image is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Event ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error
  
  /app/configs:
    post:
      tags:
      - App Configuration
      summary: Creates mobile app configuration
      description: |
        Auth: Requires a valid id_token that indicates membership in the following group\:
        
          ```urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire app config manager```
      security:
        - UserAuth: []
      requestBody:
        description: Creates AppConfig object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
            examples:
              withoutSecretKeys:
                value:
                  mobileAppVersion: "1.0.1"
                  platformBuildingBlocks: 
                    appconfig: https://api.rokwire.illinois.edu/app/configs
                    profile: https://api.rokwire.illinois.edu/profiles
                  thirdPartyServices: 
                    facebook: https://facebook.com
                    instagram_url: https://instagram.com
                  otherUniversityServices:
                    illini_cash_base_url: https://shibtest.housing.illinois.edu/MobileAppWS/api
                  secretKeys: ""
              withSecretKeys:
                value:
                  mobileAppVersion: "1.0.2"
                  platformBuildingBlocks: 
                    appconfig: https://api.rokwire.illinois.edu/app/configs
                    profile: https://api.rokwire.illinois.edu/profiles
                  thirdPartyServices: 
                    facebook: https://facebook.com
                    instagram_url: https://instagram.com
                  otherUniversityServices: 
                    illini_cash_base_url: https://shibtest.housing.illinois.edu/MobileAppWS/api
                  secretKeys: "123abc456"
        required: true
      responses:
        201:
          description: AppConfig created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
    get:
      tags:
      - App Configuration
      summary: Reads mobile app configuration
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: mobileAppVersion
          in: query
          description: query by mobile app version, results contain all app configurations if no paramer is given; If given mobileAppVersion, it will return the closest app config that is less than or equal to the given version.
          style: form
          explode: false
          schema:
            type: string
      responses:
        200:
          description: successfully read mobile app configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppConfig'
        400:
          description: Bad request.
        401:
          description: Unauthorized
        404:
          description: AppConfig not found
        500:
          description: Internal error
  /app/configs/{id}:
    get:
      tags:
      - App Configuration
      summary: Reads mobile app configuration by given id
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: id
        in: path
        description: app config id to read
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successfully read mobile app configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppConfig'
        400:
          description: Bad request.
        401:
          description: Unauthorized
        404:
          description: AppConfig not found
        500:
          description: Internal error
    put:
      tags:
      - App Configuration
      summary: Updates mobile app configuration
      description: |
        Auth: Requires a valid id_token that indicates membership in the following group\:
        
          ```urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire app config manager```
      security:
        - UserAuth: []
      parameters:
      - name: id
        in: path
        description: app config id to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update AppConfig object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppConfig'
        required: true
      responses:
        200:
          description: successfully updated mobile app configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppConfig'
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - App Configuration
      summary: Deletes mobile app configuration
      description: |
        Auth: Requires a valid id_token that indicates membership in the following group\:
        
        ```urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire app config manager```
      security:
        - UserAuth: []
      parameters:
      - name: id
        in: path
        description: app config id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: AppConfig deleted
        401:
          description: Unauthorized
        404:
          description: AppConfig not found
        500:
          description: Internal error
  /logs:
    post:
      tags:
      - Logs
      summary: Create log entries
      description: |
        Create log entries from the app.
          
          Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: A JSON array of one or more log entries. The schema of the request body is only provided as a reference and by default all of its properties are optional.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Logs"
            example:
              - timestamp: "2019-10-05T16:16:50Z"
                uuid: "e696663c-06fa-4f23-9427-4376849acb73"
                os: ios
                osVersion: "12.4"
                appVersion: "0.9.5"
                device: Samsung Galaxy s10
                deviceSettings: {}
                userAction:
                  type: view
                  name: homePanel
                  mainFeature: Home
                  subFeature: Explore
              - timestamp: "2019-10-05T16:16:51Z"
                uuid: "e696663c-06fa-4f23-9427-4376849acb73"
                os: ios
                osVersion: "12.4"
                appVersion: "0.9.5"
                device: Samsung Galaxy s10
                deviceSettings: {}
                userAction:
                  type: view
                  name: homePanel
                  mainFeature: Home
                  subFeature: Explore
                  customAttribute1: Double click
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  
  /authentication/phone-initiate:
    post:
      summary: Initiate phone number verification
      description: |
        Step 1 of 2 for phone number verification. Initiates the verification with a text or
        call that contains a code. That code should then be provided to the
        /authentication/phone-verify endpoint. Note: The phoneNumber property must include a
        prefix plus symbol (+), the country code (e.g., 1 for USA), and the area code.

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      tags:
        - Authentication
      operationId: auth_rest_service.initiate_verification
      responses:
        201:
          description: initiation successful
        400:
          description: bad request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPhoneVerifyInitBody'
            examples:
              sms:
                value:
                  phoneNumber: "+12175557890"
                  channel: "sms"
              call:
                value:
                  phoneNumber: "+12175557890"
                  channel: "call"
  /authentication/phone-verify:
    post:
      summary: Complete phone number verification
      description: |
        Step 2 of 2 for phone number verification. The request body should contain the code
        that was sent to the end user as a result of the /authentication/phone-initiate
        endpoint. phone-verify will check if the code matches what was originally sent to
        the user. Note: The phoneNumber property must include a prefix plus symbol (+),
        the country code (e.g., 1 for USA), and the area code.

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      tags:
        - Authentication
      operationId: auth_rest_service.verification_check
      responses:
        200:
          description: the result of the verification
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        enum:
                          - true
                      id_token:
                        type: string
                    required:
                      - success
                      - id_token
                  - type: object
                    properties:
                      success:
                        type: boolean
                        enum:
                          - false
                    required:
                      - success
              example:
                success: true
                id_token: deadbeef1234
        400:
          description: bad request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPhoneVerifyCheckBody'
components:
  schemas:
    Non-pii:
      type: object
      properties:
        uuid:
          type: string
        over13:
          type: boolean
        interests:
          type: array
          items:
            properties:
              category:
                type: string
              subcategories:
                type: array
                items:
                 type: string
        positiveInterestTags:
          type: array
          items:
            type: string
        negativeInterestTags:
          type: array
          items:
            type: string
        favorites:
          type: object
          items:
            properties:
              eventIds:
                type: array
                items:
                  type: string
              placeIds:
                type: array
                items:
                  type: string
              diningPlaceIds:
                type: array
                items:
                  type: string
              laundryPlaceIds:
                type: array
                items:
                  type: string
              athleticEventIds:
                type: array
                items:
                  type: string
        privacySettings:
          type: object
          properties:
            level:
              type: integer
              enum:
                - 1
                - 2
                - 3
                - 4
                - 5
            dataModified:
              type: string
        creationDate:
          type: string
        lastModifiedDate:
          type: string
    Pii:
      type: object
      properties:
        pid:
          type: string
        uuid:
          type: string
          items:
            type: string
        userName:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phone:
          type: string
        imageUrl:
          type: string
        creationDate:
          type: string
        lastModifiedDate:
          type: string
    Event:
      required:
        - title
        - startDate
        - category
      type: object
      properties:
        id:
          type: string
          description: the event id
        sourceEventId:
          type: string
          description: The ID of the event in the original event source (e.g., WebTools, EMS, etc.)
        recurringFlag:
          type: boolean
          description: a flag to denote this is recurring event
        recurrenceId:
          type: integer
          description: recurring id
        category:
          type: string
          enum:
            - Entertainment
            - Academic
            - Community
            - Career Development
            - Recreation
            - Athletics
            - Other
        subcategory:
          type: string
        dateCreated:
          type: string
          format: date-time
        createdBy:
          type: string
        sponsor:
          type: string
          description: For example, Center for Advanced Study
        title:
          type: string
        subTitle:
          type: string
        titleURL:
          type: string
          description: Title URL representing the event title. For example, https://cas.illinois.edu/node/190
        longDescription:
          type: string
        shortDescription:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        targetAudience:
          type: array
          items:
            type: "string"
            enum:
            - students
            - faculty
            - staff
            - alumni
            - parents
            - public
        imageUrl:
          type: string
        icalUrl:
          type: string
        outlookUrl:
          type: string
        speaker:
          type: string
        registrationLabel:
          type: string
        registrationURL:
          type: string
        cost:
          type: string
          description: For example, Free and open to the public.
        contacts:
          type: array
          xml:
            name: "contact"
            wrapped: true
          items:
            $ref: "#/components/schemas/Contact"
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            type: string
        placeId:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        dateModified:
          type: string
          description: store a timestamp when this event was modified.
          format: date-time
        submissionStatus:
          type: string
          description: store the status of this event submission
          enum:
          - submitted
          - published
          - rejected
          - incomplete
          - archived
        isSuperEvent:
          type: boolean
          description: States whether an event is a super event (`true`) or not (`false`). A super event is defined as an event that contains one more sub events. E.g. conference, workshop, exhibition, etc. Each sub event can be a featured sub event and can contain a track that the sub event belongs to.
        subEvents:
          type: array
          description: A list of objects containg some basic details about the sub events that are part of a super event. This property currently applies only to a super event. I.e. this assumes that `isSuperEvent` is set to `true`.
          items:
            $ref: "#/components/schemas/SubEventDetails"
    SubEventDetails:
      type: object
      properties:
        id: 
          type: string
          description: ID of the sub event. A sub event is a regular event, except that it's associated with a another event called a super event.
        isFeatured:
          type: boolean
          description: Inidicates whether a sub event is a featured sub event (`true`) or not (`false`). This property can be used to highlight a sub event.
        track:
          type: string
          description: Stores the track or a category that the sub event belongs to. This property can be used to group one or more sub events that are part of a super event. Here, we are using the term *track* in order to differentiate this from the *category* property that is part of the *Event* object.
    Categories:
      type: object
      properties:
        category:
          type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/SubCategory'
    SubCategory:
      type: string
    Location:
      type: object
      properties:
        locationId:
          type: string
        room:
          type: string
        building:
          type: string
        address:
          type: string
        latitude:
          type: number
          description: Latitude component of location.
        longitude:
          type: number
          description: Longitude component of location.
        description:
          type: string
          description: Description of the building from WebTools, e.g., Krannert Center for the Performing Arts, 500 S Goodwin Ave, Urbana.
        floor:
          type: integer
    Contact:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        organization:
          type: string
      xml:
        name: "Contact"
    AppConfig:
      type: object
      properties:
        id:
          type: string
        mobileAppVersion:
          type: string
          description: unique and is empty or conforms major.minor.patch format
        platformBuildingBlocks:
          type: object
        thirdPartyServices:
          type: object
        otherUniversityServices:
          type: object
        secretKeys:
          type: string
      required:
        - mobileAppVersion
        - platformBuildingBlocks
        - thirdPartyServices
        - otherUniversityServices
        - secretKeys
    Logs:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the log event as defined by RFC 3339 in the format YYYY-MM-DDThh:mm:ssZ
        uuid:
          type: string
          format: uuid
          description: UUID of the app user.
        os:
          type: string
          description: Name of operating system on the device running the app.
        osVersion:
          type: string
          description: Version of operating system on the device running the app.
        appVersion:
          type: string
          description: App version.
        device:
          type: string
          description: Name of device running the app.
        deviceSettings:
          type: object
          description: Object containing relevant device settings.
        userAction:
          $ref: '#/components/schemas/UserAction'
    UserAction:
      type: object
      description: Object containing details of user action.
      properties:
        type:
          type: string
          description: Type of user action. Examples can be 'click', 'view', etc.
        name:
          type: string
          description: Name of user action. This can include the page user is viewing or the UI widget the user is clicking on when generating a log entry. This property can depend on the user action type.
        mainFeature:
          type: string
          description: Name of the main feature that the user is using when generating a log entry.
        subFeature:
          type: string
          description: Name of the sub-feature that the user is using when generating a log entry.
        customAttribute1:
          type: string
          description: Custom attribute provided for future use.
        customAttribute2:
          type: string
          description: Custom attribute provided for future use.
        customAttribute3:
          type: string
          description: Custom attribute provided for future use.
        customAttribute4:
          type: string
          description: Custom attribute provided for future use.
        customAttribute5:
          type: string
          description: Custom attribute provided for future use.
    PhoneNumber:
      type: string
      minLength: 4
      maxLength: 20
      example: "+12175557890"
    AuthPhoneVerifyInitBody:
      type: object
      properties:
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        channel:
          type: string
          enum:
            - sms
            - call
      required:
        - phoneNumber
        - channel
      example:
        phoneNumber: "+12175557890"
        channel: "sms"
    AuthPhoneVerifyCheckBody:
      type: object
      properties:
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        code:
          type: string
          minLength: 6
          maxLength: 6
      required:
        - phoneNumber
        - code
      example:
        phoneNumber: "+12175557890"
        code: "123456"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ROKWIRE-API-KEY
      x-apikeyInfoFunc: auth_middleware.verify_apikey
      description: Each client version has unique API key (e.g., "c6befa22-50a6-4403-a8fc-378c9719743b"). For API endpoints that do not require user authentication, the ROKWIRE-API-KEY header must contain an API key corresponding to a supported client.
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # https://openid.net/specs/openid-connect-core-1_0.html [id_token]
      x-bearerInfoFunc: auth_middleware.verify_userauth
      description: The client must send a valid (i.e., signed, not expired) OpenID Connect id_token in the Authorization header when making requests to API endpoints that require user authentication.
