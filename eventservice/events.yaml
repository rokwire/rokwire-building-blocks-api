openapi: 3.0.0
info:
  title: Rokwire Events Building Block API
  description: Events Building Block API Documentation
  version: 1.8.0
servers:
- url: https://api.rokwire.illinois.edu
  description: Production server
- url: https://api-test.rokwire.illinois.edu
  description: Test server
- url: https://api-dev.rokwire.illinois.edu
  description: Development server
tags:
- name: Events
  description: API endpoints for managing events.
paths:
  /events:
    get:
      tags:
      - Events
      summary: searches events
      description: |
        By passing in the appropriate options, you can search for events matching your criteria in the system

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: title
        in: query
        description: The parameter for searching events based on keywords in the title.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: recurrenceId
        in: query
        description: The parameter to search events based on a specific recurrence ID.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: tags
        in: query
        description: Search events with the given tags, e.g., /events?tags=coffee&tags=music. This query will return all events whose tags contain coffee or music
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: targetAudience
        in: query
        description: The parameter for searching events based on given input target audience, e.g., /events?targetAudience=students&targetAudience=staff. This query will return all events whose target audience is either students or staff. This parameter is CURRENTLY IGNORED.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDate
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?startDate=2019-04-25T13:00:00. This query will return all events whose start date is equal or after the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDate.lte
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?startDate.lte=2019-04-25T13:00:00. This query will return all events whose start date is equal or before the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDate.gte
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?startDate.gte=2019-04-25T13:00:00. This query will return all events whose start date is equal or after the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startDateLimit
        in: query
        description: Another parameter for searching events based on a given start date, e.g., /events?startDateLimit=2019-04-25T13:00:00. This query will return all events whose start date is less than or equal to the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endDate
        in: query
        description: The parameter for searching events based on a given end date, e.g., /events?endDate=2019-04-25T13:00:00. This query will return all events whose start date is equal or before the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endDate.lte
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?endDate.lte=2019-04-25T13:00:00. This query will return all events whose end date is equal or before the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endDate.gte
        in: query
        description: The parameter for searching events based on a given start date, e.g., /events?endDate.gte=2019-04-25T13:00:00. This query will return all events whose end date is equal or after the given input date.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: latitude
        in: query
        description: The latitude of the center point for geolocation radius search.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: longitude
        in: query
        description: The longitude of the center point for geolocation radius search.
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: radius
        in: query
        description: The parameter to search events within a given radius of the provided location in meters, e.g., /events?latitude=40.1078955&longitude=-88.224036&radius=800. This query will return back all events whose geolocation is within 800 meter centered at given geolocation point.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      - name: id
        in: query
        description: The parameter for searching multiple events based on their IDs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: superEventId
        in: query
        description: The parameter for searching sub events based on the ID of a super event.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

        401:
          description: Unauthorized
        404:
          description: Event not found
        500:
          description: Internal error
    post:
      tags:
        - Events
      summary: create an event
      description: |
        create an event record into the system

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        201:
          description: Events created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal error
  /events/{event_id}:
    get:
      tags:
      - Events
      summary: Get one event by the given event id.
      description: |
        Get the event record matching the eventId.

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: event_id
        in: path
        description: ID of the event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        500:
          description: Internal error
    put:
      tags:
      - Events
      summary: Updates one event with form data
      description: |
        Update the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: ID of the event that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: update one event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
    delete:
      tags:
      - Events
      summary: Deletes an event by the given event id
      description: |
        Delete the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: event id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        202:
          description: Event is deleted
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Event not found
    patch:
      tags:
        - Events
      summary: Updates one event with form data
      description: |
        Update the event record matching the eventId.

        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      parameters:
        - name: event_id
          in: path
          description: ID of the event that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: patch one event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        405:
          description: Invalid input
        500:
          description: Internal error
  /events/categories:
    get:
      tags:
      - Events
      summary: Get events categories
      description: |
        return back a list of categories and subcategories

        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'

        401:
          description: Unauthorized
        404:
          description: Event not found
        500:
          description: Internal error
  /events/tags:
    get:
      tags:
      - Events
      summary: Get a list of Rokwire event tags
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Getting event tags successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal error
  /events/super-events/tags:
    get:
      tags:
      - Events
      summary: Get a list of Rokwire super event tags
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Getting super event tags successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal error
  /events/{event_id}/images:
    get:
      tags:
      - Events
      summary: Get IDs of all images associated with the requested event.
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: event_id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Getting image IDs successful.
          content:
            multipart/form-data:
              schema:
                type: array
                items:
                  type: string
                  format: binary
        500:
          description: Internal error
    post:
      tags:
        - Events
      summary: Upload an image to the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Image file to upload and associate with the requested event
        content:
          image/*:
            schema:
              type: string
              format: binary
              minLength: 1
              maxLength: 5000000
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      responses:
        201:
          description: Images uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Image ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error
  /events/{event_id}/images/{image_id}:
    get:
      tags:
      - Events
      summary: Download an event image by providing the IDs of the event and the image.
      description: |
        Auth: Requires a valid API Key for access.
      security:
        - ApiKeyAuth: []
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: Requested image ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful image download
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        500:
          description: Internal Error

    put:
      tags:
      - Events
      summary: Update an image associated with the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      requestBody:
        description: Image file to add to the event
        content:
          image/*:
            schema:
              type: string
              format: binary
              minLength: 1
              maxLength: 5000000
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: Requested image ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Event ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error

    delete:
      tags:
      - Events
      summary: Delete an image associated with the specified event
      description: |
        Auth: Requires a valid id_token that indicates membership in at least one of the following groups\:
          ```
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events manager
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire ems events uploader
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire events web app
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire event approvers
          urn:mace:uiuc.edu:urbana:authman:app-rokwire-service-policy-rokwire groups access
          ```
      security:
        - UserAuth: []
      parameters:
      - name: event_id
        in: path
        description: Event ID
        required: true
        schema:
          type: string
      - name: image_id
        in: path
        description: ID of the image that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        202:
          description: Image is deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Operation status code
                  id:
                    type: integer
                    format: int64
                    description: Event ID
                  message:
                    type: string
                    description: The description of the operation
        500:
          description: Internal error
components:
  schemas:
    Event:
      required:
        - title
        - startDate
        - category
      type: object
      properties:
        id:
          type: string
          description: the event id
        sourceEventId:
          type: string
          description: The ID of the event in the original event source (e.g., WebTools, EMS, etc.)
        recurringFlag:
          type: boolean
          description: a flag to denote this is recurring event
        recurrenceId:
          type: integer
          description: recurring id
        category:
          type: string
          enum:
            - Entertainment
            - Academic
            - Community
            - Career Development
            - Recreation
            - Athletics
            - Other
        subcategory:
          type: string
        dateCreated:
          type: string
          format: date-time
        createdBy:
          type: string
        sponsor:
          type: string
          description: For example, Center for Advanced Study
        title:
          type: string
        subTitle:
          type: string
        titleURL:
          type: string
          description: Title URL representing the event title. For example, https://cas.illinois.edu/node/190
        longDescription:
          type: string
        shortDescription:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        targetAudience:
          type: array
          items:
            type: "string"
            enum:
            - students
            - faculty
            - staff
            - alumni
            - parents
            - public
        imageUrl:
          type: string
        icalUrl:
          type: string
        outlookUrl:
          type: string
        speaker:
          type: string
        registrationLabel:
          type: string
        registrationURL:
          type: string
        cost:
          type: string
          description: For example, Free and open to the public.
        contacts:
          type: array
          xml:
            name: "contact"
            wrapped: true
          items:
            $ref: "#/components/schemas/Contact"
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            type: string
        placeId:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        dateModified:
          type: string
          description: store a timestamp when this event was modified.
          format: date-time
        submissionStatus:
          type: string
          description: store the status of this event submission
          enum:
          - submitted
          - published
          - rejected
          - incomplete
          - archived
        isSuperEvent:
          type: boolean
          description: States whether an event is a super event (`true`) or not (`false`). A super event is defined as an event that contains one more sub events. E.g. conference, workshop, exhibition, etc. Each sub event can be a featured sub event and can contain a track that the sub event belongs to.
        subEvents:
          type: array
          description: A list of objects containg some basic details about the sub events that are part of a super event. This property currently applies only to a super event. I.e. this assumes that `isSuperEvent` is set to `true`.
          items:
            $ref: "#/components/schemas/SubEventDetails"
        displayOnlyWithSuperEvent:
          type: boolean
          description: If this flag is set to true, the app client will then display the event only under a super events screen.
        isVirtual:
          type: boolean
          description: Setting this to true will indicate that the event is virtual. This flag can then be used to ignore geocoding calculation or displaying a physical location in the app.
    SubEventDetails:
      type: object
      properties:
        id:
          type: string
          description: ID of the sub event. A sub event is a regular event, except that it's associated with a another event called a super event.
        isFeatured:
          type: boolean
          description: Inidicates whether a sub event is a featured sub event (`true`) or not (`false`). This property can be used to highlight a sub event.
        track:
          type: string
          description: Stores the track or a category that the sub event belongs to. This property can be used to group one or more sub events that are part of a super event. Here, we are using the term *track* in order to differentiate this from the *category* property that is part of the *Event* object.
    Categories:
      type: object
      properties:
        category:
          type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/SubCategory'
    SubCategory:
      type: string
    Location:
      type: object
      properties:
        locationId:
          type: string
        room:
          type: string
        building:
          type: string
        address:
          type: string
        latitude:
          type: number
          description: Latitude component of location.
        longitude:
          type: number
          description: Longitude component of location.
        description:
          type: string
          description: Description of the building from WebTools, e.g., Krannert Center for the Performing Arts, 500 S Goodwin Ave, Urbana.
        floor:
          type: integer
    Contact:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        organization:
          type: string
      xml:
        name: "Contact"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ROKWIRE-API-KEY
      x-apikeyInfoFunc: auth_middleware.verify_apikey
      description: Each client version has unique API key (e.g., "c6befa22-50a6-4403-a8fc-378c9719743b"). For API endpoints that do not require user authentication, the ROKWIRE-API-KEY header must contain an API key corresponding to a supported client.
    UserAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # https://openid.net/specs/openid-connect-core-1_0.html [id_token]
      x-bearerInfoFunc: auth_middleware.verify_userauth
      description: The client must send a valid (i.e., signed, not expired) OpenID Connect id_token in the Authorization header when making requests to API endpoints that require user authentication.
